// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Categories {
  id   Int    @id @default(autoincrement())
  name String

  foods Foods[] // relation to Foods (one-to-many)

  @@map("categories")
}

model Foods {
  id           Int     @id @default(autoincrement())
  name         String
  categoryId   Int     @map("category_id") // FK
  price        Float
  description  String?
  restaurantId Int     @map("restaurant_id") // FK

  Categories  Categories   @relation(fields: [categoryId], references: [id]) // relation to Categories (one-to-many)
  Restaurants Restaurants  @relation(fields: [restaurantId], references: [id]) // relation to Restaurants (one-to-many)
  FoodImages  FoodImages[] // relation to FoodImages (one-to-many)

  @@map("foods")
}

model FoodImages {
  id       Int    @id @default(autoincrement())
  foodId   Int    @map("food_id") // FK
  imageUrl String @map("image_url")

  Foods Foods @relation(fields: [foodId], references: [id]) // relation to Foods (one-to-many)

  @@map("food_images")
}

model Restaurants {
  id        Int      @id @default(autoincrement())
  name      String
  phone     String
  address   String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")
  userId    Int      @map("user_id")

  Foods Foods[] // relation to Foods (one-to-many)

  @@map("restaurants")
}

model Users {
  id        Int       @id @default(autoincrement())
  name      String
  gender    Boolean   @default(true) // 1: male - 0: female
  email     String    @unique
  password  String
  phone     String    @unique
  address   String?
  roleId    Int       @map("role_id") // FK
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @default(now()) @map("updated_at")
  dob       DateTime?

  // orders Order[]

  Roles Roles @relation(fields: [roleId], references: [id]) // relation to Roles (one-to-many)

  @@map("users")
}

model Roles {
  id               Int                @id @default(autoincrement())
  name             String
  users            Users[] // relation to Users (one-to-many)
  RolesPermissions RolesPermissions[] // relation to RolesPermissions (many-to-many)

  @@map("roles")
}

model Permissions {
  id               Int                @id @default(autoincrement())
  name             String
  RolesPermissions RolesPermissions[] // relation to RolesPermissions (many-to-many)

  @@map("permissions")
}

model RolesPermissions {
  id           Int @id @default(autoincrement())
  roleId       Int @map("role_id") // FK
  permissionId Int @map("permission_id") // FK

  Roles       Roles       @relation(fields: [roleId], references: [id]) // relation to Roles (many-to-many)
  Permissions Permissions @relation(fields: [permissionId], references: [id]) // relation to Permissions (many-to-many)

  @@map("roles_permissions")
}

model Invoices {
  id        Int      @id @default(autoincrement())
  orderId   Int      @map("order_id")
  createdAt DateTime @default(now()) @map("created_at")
  total     Float

  // Order Orders @relation(fields: [orderId], references: [id])

  @@map("invoices")
}
